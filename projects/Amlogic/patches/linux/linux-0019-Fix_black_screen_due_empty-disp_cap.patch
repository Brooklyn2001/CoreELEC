From 823744e24bd5ad6c7e7f9e4792c2cabfd377df16 Mon Sep 17 00:00:00 2001
From: cdu13a <cdu13a@gmail.com>
Date: Thu, 25 Oct 2018 23:25:49 -0400
Subject: [PATCH] Remove sanity check on display modes

Since we can't currently rely on edid values for Max_TMDS_Clock1
don't sanity check againt it. We could end up with no display
modes. even when they are valid and available
---
 .../amlogic/hdmi/hdmi_tx_20/hdmi_tx_main.c    | 35 +++++++------------
 1 file changed, 13 insertions(+), 22 deletions(-)

diff --git a/drivers/amlogic/hdmi/hdmi_tx_20/hdmi_tx_main.c b/drivers/amlogic/hdmi/hdmi_tx_20/hdmi_tx_main.c
index c90d88c073a..5bd40471120 100644
--- a/drivers/amlogic/hdmi/hdmi_tx_20/hdmi_tx_main.c
+++ b/drivers/amlogic/hdmi/hdmi_tx_20/hdmi_tx_main.c
@@ -1429,38 +1429,29 @@ static ssize_t show_disp_cap(struct device *dev,
 	const char *native_disp_mode =
 		hdmitx_edid_get_native_VIC(&hdmitx_device);
 	enum hdmi_vic vic;
-	struct hdmi_format_para *para = NULL;
 	if (hdmitx_device.tv_no_edid) {
 		pos += snprintf(buf+pos, PAGE_SIZE, "null edid\n");
 	} else {
 		for (i = 0; disp_mode_t[i]; i++) {
 			vic = hdmitx_edid_get_VIC(&hdmitx_device,
-					disp_mode_t[i], 0);
-			if (vic != HDMI_Unkown) {
-				/* sanity check */
-				para = hdmi_get_fmt_paras(vic);
-				if (! hdmitx_device.RXCap.HF_IEEEOUI &&
-						hdmitx_device.RXCap.Max_TMDS_Clock1 >= 15 &&
-						para->tmds_clk > hdmitx_device.RXCap.Max_TMDS_Clock1 * 5000){
-					pr_info("Mode %s (VIC %d) needs %dMHz clock, more than %dMHz",
-							disp_mode_t[i], vic, para->tmds_clk / 1000, hdmitx_device.RXCap.Max_TMDS_Clock1 * 5);
-				} else {
-					pos += snprintf(buf+pos, PAGE_SIZE, "%s",
-							disp_mode_t[i]);
-					if (native_disp_mode && (strcmp(
-									native_disp_mode,
-									disp_mode_t[i]) == 0)) {
-						pos += snprintf(buf+pos, PAGE_SIZE,
-								"*\n");
-					} else
-						pos += snprintf(buf+pos, PAGE_SIZE, "\n");
-				}
-			}
+				disp_mode_t[i], 0);
+		if (vic != HDMI_Unkown) {
+			pos += snprintf(buf+pos, PAGE_SIZE, "%s",
+				disp_mode_t[i]);
+			if (native_disp_mode && (strcmp(
+				native_disp_mode,
+				disp_mode_t[i]) == 0)) {
+				pos += snprintf(buf+pos, PAGE_SIZE,
+					"*\n");
+			} else
+			pos += snprintf(buf+pos, PAGE_SIZE, "\n");
+		}
 		}
 	}
 	return pos;
 }
 
+
 static ssize_t show_preferred_mode(struct device *dev,
 	struct device_attribute *attr, char *buf)
 {
