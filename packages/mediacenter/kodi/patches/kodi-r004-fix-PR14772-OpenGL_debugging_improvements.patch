diff -Naurp kodi-ead4000/xbmc/rendering/gles/RenderSystemGLES.cpp kodi-ead4000-patch/xbmc/rendering/gles/RenderSystemGLES.cpp
--- kodi-ead4000/xbmc/rendering/gles/RenderSystemGLES.cpp	2018-11-23 10:22:02.000000000 +0200
+++ kodi-ead4000-patch/xbmc/rendering/gles/RenderSystemGLES.cpp	2018-11-23 16:39:48.000000000 +0200
@@ -77,7 +77,7 @@ bool CRenderSystemGLES::InitRenderSystem
   m_RenderExtensions += " ";
 
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(GL_KHR_debug) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(GL_KHR_debug) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_openGlDebugging)
   {
     if (IsExtSupported("GL_KHR_debug"))
diff -Naurp kodi-ead4000/xbmc/utils/EGLUtils.cpp kodi-ead4000-patch/xbmc/utils/EGLUtils.cpp
--- kodi-ead4000/xbmc/utils/EGLUtils.cpp	2018-11-23 10:22:02.000000000 +0200
+++ kodi-ead4000-patch/xbmc/utils/EGLUtils.cpp	2018-11-23 16:43:35.000000000 +0200
@@ -98,7 +98,7 @@ std::map<EGLenum, const char*> eglErrors
 std::map<EGLint, const char*> eglErrorType =
 {
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   X(EGL_DEBUG_MSG_CRITICAL_KHR),
   X(EGL_DEBUG_MSG_ERROR_KHR),
   X(EGL_DEBUG_MSG_WARN_KHR),
@@ -110,7 +110,7 @@ std::map<EGLint, const char*> eglErrorTy
 } // namespace
 
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
 void EglErrorCallback(EGLenum error, const char *command, EGLint messageType, EGLLabelKHR threadLabel, EGLLabelKHR objectLabel, const char* message)
 {
   std::string errorStr;
@@ -190,7 +190,7 @@ CEGLContextUtils::CEGLContextUtils(EGLen
 : m_platform{platform}
 {
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   if (CEGLUtils::HasClientExtension("EGL_KHR_debug"))
   {
     auto eglDebugMessageControl = CEGLUtils::GetRequiredProcAddress<PFNEGLDEBUGMESSAGECONTROLKHRPROC>("eglDebugMessageControlKHR");
@@ -405,7 +405,7 @@ bool CEGLContextUtils::CreateContext(CEG
     contextAttribs.Add({{EGL_CONTEXT_PRIORITY_LEVEL_IMG, EGL_CONTEXT_PRIORITY_HIGH_IMG}});
 
 //! @todo remove when Raspberry Pi updates their EGL headers
-#if !defined(TARGET_RASPBERRY_PI)
+#if !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   if (CEGLUtils::HasExtension(m_eglDisplay, "EGL_KHR_create_context") &&
       CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_openGlDebugging)
   {
diff -Naurp kodi-ead4000/xbmc/utils/GLUtils.cpp kodi-ead4000-patch/xbmc/utils/GLUtils.cpp
--- kodi-ead4000/xbmc/utils/GLUtils.cpp	2018-11-23 10:22:02.000000000 +0200
+++ kodi-ead4000-patch/xbmc/utils/GLUtils.cpp	2018-11-23 16:45:05.000000000 +0200
@@ -42,7 +42,7 @@ std::map<GLenum, const char*> glErrors =
 std::map<GLenum, const char*> glErrorSource =
 {
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   X(GL_DEBUG_SOURCE_API_KHR),
   X(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR),
   X(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR),
@@ -55,7 +55,7 @@ std::map<GLenum, const char*> glErrorSou
 std::map<GLenum, const char*> glErrorType =
 {
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   X(GL_DEBUG_TYPE_ERROR_KHR),
   X(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR),
   X(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR),
@@ -69,7 +69,7 @@ std::map<GLenum, const char*> glErrorTyp
 std::map<GLenum, const char*> glErrorSeverity =
 {
 //! @todo remove TARGET_RASPBERRY_PI when Raspberry Pi updates their GL headers
-#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_RASPBERRY_PI) && !defined(__arm__) && !defined(__aarch64__)
   X(GL_DEBUG_SEVERITY_HIGH_KHR),
   X(GL_DEBUG_SEVERITY_MEDIUM_KHR),
   X(GL_DEBUG_SEVERITY_LOW_KHR),
