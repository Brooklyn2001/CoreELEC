diff -Naurp CoreELEC-settings-238e0c2/language/English/strings.po CoreELEC-settings-238e0c2-patch/language/English/strings.po
--- CoreELEC-settings-238e0c2/language/English/strings.po	2018-06-24 17:53:36.000000000 +0300
+++ CoreELEC-settings-238e0c2-patch/language/English/strings.po	2018-06-25 09:31:48.000000000 +0300
@@ -1111,3 +1111,103 @@ msgstr ""
 msgctxt "#4619"
 msgid "Select Debug level"
 msgstr ""
+
+########## TV Service #########
+
+msgctxt "#43000"
+msgid "TV services"
+msgstr ""
+
+msgctxt "#4300"
+msgid "Configure Tvheadend and CAMD server."
+msgstr ""
+
+### OSCAM_DAEMON ###
+
+msgctxt "#42020"
+msgid "Oscam server"
+msgstr ""
+
+msgctxt "#42021"
+msgid "Enable Oscam"
+msgstr ""
+
+msgctxt "#4221"
+msgid "OSCam is an Open Source Conditional Access Module software, based on the very good MpCS version 0.9d."
+msgstr ""
+
+### TVHEADEND ###
+
+msgctxt "#42030"
+msgid "Tvheadend Configuration"
+msgstr ""
+
+msgctxt "#42031"
+msgid "Enable Tvheadend"
+msgstr ""
+
+msgctxt "#4231"
+msgid "Tvheadend is a TV streaming server and recorder supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, ISDB-T, IPTV, SAT>IP as input sources."
+msgstr ""
+
+msgctxt "#42032"
+msgid "Wait DVB frontend"
+msgstr ""
+
+msgctxt "#4232"
+msgid "Wait DVB frontend before the start TVH (max 30 sec)."
+msgstr ""
+
+msgctxt "#42033"
+msgid "Enable Debug"
+msgstr ""
+
+msgctxt "#4233"
+msgid "Enable debugging Tvheadend."
+msgstr ""
+
+### Channel logos ###
+
+msgctxt "#43050"
+msgid "Channel logos"
+msgstr ""
+
+msgctxt "#43052"
+msgid "Clear Logos"
+msgstr ""
+
+msgctxt "#4352"
+msgid "If enabled old logos of channels will be removed."
+msgstr ""
+
+msgctxt "#43053"
+msgid "Background color"
+msgstr ""
+
+msgctxt "#4353"
+msgid "Background logos color."
+msgstr ""
+
+msgctxt "#43054"
+msgid "Foreground color"
+msgstr ""
+
+msgctxt "#4354"
+msgid "Foreground logos color."
+msgstr ""
+
+msgctxt "#43055"
+msgid "Text color"
+msgstr ""
+
+msgctxt "#4355"
+msgid "Text logos color."
+msgstr ""
+
+msgctxt "#43056"
+msgid "Create logos"
+msgstr ""
+
+msgctxt "#4356"
+msgid "Create logos channels."
+msgstr ""
diff -Naurp CoreELEC-settings-238e0c2/src/defaults.py CoreELEC-settings-238e0c2-patch/src/defaults.py
--- CoreELEC-settings-238e0c2/src/defaults.py	2018-06-24 19:01:29.000000000 +0300
+++ CoreELEC-settings-238e0c2-patch/src/defaults.py	2018-06-24 19:51:33.000000000 +0300
@@ -1,21 +1,6 @@
 ################################################################################
-#      This file is part of CoreELEC - https://coreelec.org
-#      Copyright (C) 2018-present CoreELEC (team (at) coreelec.org)
-#      Copyright (C) 2009-2013 Stephan Raue (stephan@openelec.tv)
-#      Copyright (C) 2013 Lutz Fiebach (lufie@openelec.tv)
-#
-#  CoreELEC is free software: you can redistribute it and/or modify
-#  it under the terms of the GNU General Public License as published by
-#  the Free Software Foundation, either version 2 of the License, or
-#  (at your option) any later version.
-#
-#  CoreELEC is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-#
-#  You should have received a copy of the GNU General Public License
-#  along with CoreELEC.  If not, see <http://www.gnu.org/licenses/>.
+#      This file is part of Alex@ELEC - http://www.alexelec.in.ua
+#      Copyright (C) 2011-present Alexandr Zuyev (alex@alexelec.in.ua)
 ################################################################################
 
 import os
@@ -96,6 +81,30 @@ aceplist = {
     }
 
 ################################################################################
+# TV Service Module
+################################################################################
+
+tvserver = {
+    'ENABLED'        : True,
+    #TVHEADEND
+    'D_TVH_DEBUG'    : '0',
+    'D_TVH_FEINIT'   : '0',
+
+    #CH LOGOS
+    'URL_LOGOS_FILE'      : 'https://github.com/AlexELEC/channel-logos/releases/download/v1.0/logos.tar.bz2',
+    'RUN_LOGOS'           : "%s/logos.sh" % SCRIPT_DIR(),
+    'GET_LOGO_COUNT'      : "wc -l /storage/.kodi/temp/logos_src/src_file.tmp | awk '{print $1}'",
+    'GET_MISS_COUNT'      : "wc -l /tmp/miss_logo.log | awk '{print $1}'",
+    'GET_TVH_STATUS'      : "%s/tvh-status.sh" % SCRIPT_DIR(),
+    'LOGO_GET_LOG'        : "tail -n1 /tmp/logo_conv.log",
+    'KILL_LOGO_SH'        : "killall -9 logos.sh",
+    'D_LOGOS_CLEAR'       : '0',
+    'D_LOGOS_BG_COLOR'    : 'Grey',
+    'D_LOGOS_FG_COLOR'    : '4',
+    'D_LOGOS_TEXT_COLOR'  : 'black',
+    }
+
+################################################################################
 # Service Module
 ################################################################################
 
@@ -156,4 +165,6 @@ _services = {
     'iptables': ['iptables.service'],
     'acestream': ['acestream.service'],
     'noxbit': ['noxbit.service'],
+    'oscam': ['oscam.service'],
+    'tvheadend': ['tvheadend.service'],
     }
diff -Naurp CoreELEC-settings-238e0c2/src/resources/bin/logos.sh CoreELEC-settings-238e0c2-patch/src/resources/bin/logos.sh
--- CoreELEC-settings-238e0c2/src/resources/bin/logos.sh	1970-01-01 03:00:00.000000000 +0300
+++ CoreELEC-settings-238e0c2-patch/src/resources/bin/logos.sh	2018-06-25 09:34:29.000000000 +0300
@@ -0,0 +1,177 @@
+#!/bin/sh
+################################################################################
+#      This file is part of Alex@ELEC - http://www.alexelec.in.ua
+#      Copyright (C) 2011-present Alexandr Zuyev (alex@alexelec.in.ua)
+################################################################################
+
+. /storage/.cache/services/logos.conf
+. /tmp/tvh-url.logos
+
+LOGOS_DIR="/storage/picons/tvh"
+TVH_CH_COUNT=`curl -s $TVH_URL'/api/channel/grid?start=0&limit=1' | jq -r '.total'`
+TVH_CH_COUNT=`expr $TVH_CH_COUNT - 1`
+
+LOG_FILE="/tmp/logo_conv.log"
+MISS_FILE="/tmp/miss_logo.log"
+RENAME_FILE="/tmp/rename_logo.log"
+TEMP_DIR="/storage/.kodi/temp"
+SOURCE_DIR="$TEMP_DIR/logos_src" #logo source directory / путь к логотипам с прозрачными фонами
+SOURCE_DIR_LOGOS="$SOURCE_DIR/logos" #logo source directory <logos>
+SOURCE_DIR_BACKG="$SOURCE_DIR/backgrounds" #logo source directory <backgrounds>
+SOURCE_FILE_NAMES="$SOURCE_DIR/src_file.tmp"
+OUTPUT_DIR_TEMP="$LOGOS_DIR/tmp"
+BACKGROUND="$SOURCE_DIR_BACKG/bg-${LOGOS_BG_COLOR}.png" #choose your background / путь к файлу фона логотипа
+FOREGROUND="$SOURCE_DIR_BACKG/fg${LOGOS_FG_COLOR}.png" #choose your foreground / путь к файлу блика логотипа
+
+RESIZE='220x164'
+EXTENT='268x200'
+
+#################################MAIN###########################################
+
+# Unpack Logos
+if [ "$1" == "unpack" ] ; then
+
+  rm -rf $SOURCE_DIR
+  mkdir -p $SOURCE_DIR
+  tar -jxf $TEMP_DIR/logos.tar.bz2 -C $SOURCE_DIR
+  rm -f $TEMP_DIR/logos.tar.bz2
+  echo "Unpack logos completed."
+
+# Create logos list file
+elif [ "$1" == "list" ] ; then
+  rm -f $SOURCE_FILE_NAMES
+  touch $SOURCE_FILE_NAMES
+
+  # reading channels from TVH
+  for channel in `seq 0 $TVH_CH_COUNT`; do
+      ch_name=`curl -s $TVH_URL'/api/channel/grid?start='$channel'&limit=1' | jq -r '.entries | .[] | .name' | sed 's/\// /; s/|//; s/://; s/  / /g; s/ test$//i; s/[ \t]*$//'`
+      if [ -z "$ch_name" ]; then
+          continue
+      else
+          IS_CHANNEL=$(find $SOURCE_DIR_LOGOS -iname "$ch_name.png")
+          IS_CHANNEL_LIST=$(grep "$IS_CHANNEL" $SOURCE_FILE_NAMES)
+          [ "$IS_CHANNEL" != "" -a "$IS_CHANNEL_LIST" == "" ] && echo "$IS_CHANNEL" >> $SOURCE_FILE_NAMES
+      fi
+  done
+
+# Convert downloaded logos
+elif [ "$1" == "convert" ] ; then
+  rm -f $LOG_FILE
+  touch $LOG_FILE
+  mkdir -p $LOGOS_DIR
+  [ "$LOGOS_CLEAR" == "1" ] && rm -rf $LOGOS_DIR/*
+
+  cat $SOURCE_FILE_NAMES |
+      while read -r FILE_NAMES ; do
+          file=$(echo $FILE_NAMES)
+          channel=$(basename "$file")
+          echo_channel=$(echo "$channel" | sed -e 's/\.png$//')
+          lcase_file=$(echo "$channel" | tr 'A-Z' 'a-z')
+          target_file="$LOGOS_DIR/$lcase_file"
+          echo "Convertion logo: $echo_channel" > $LOG_FILE
+          if [ ! -e "$target_file" ] ; then
+              convert +dither -background 'transparent' -resize $RESIZE -extent $EXTENT -gravity 'center' "$file" png:- 2> /dev/null | \
+              composite - $BACKGROUND png:- 2> /dev/null | \
+              composite -compose screen -blend 50x100 $FOREGROUND - "$target_file" 2> /dev/null
+          fi
+     done
+  echo "Conversion logos completed." > $LOG_FILE
+
+# Missing logos count
+elif [ "$1" == "misslist" ] ; then
+  rm -f $MISS_FILE
+
+  # reading channels from TVH
+  for channel in `seq 0 $TVH_CH_COUNT`; do
+      ch_name=`curl -s $TVH_URL'/api/channel/grid?start='$channel'&limit=1' | jq -r '.entries | .[] | .name' | sed 's/\// /; s/|//; s/://; s/  / /g; s/ test$//i; s/[ \t]*$//'`
+      if [ -z "$ch_name" ]; then
+          continue
+      else
+          lcase_name=$(echo "$ch_name" | tr 'A-Z' 'a-z' | sed 's/\// /')
+          target_file="$LOGOS_DIR/$lcase_name.png"
+
+          if [ ! -e "$target_file" ] ; then
+              echo "$target_file" >> $MISS_FILE
+          fi
+      fi
+  done
+  if [ -f "$MISS_FILE" ]; then
+      echo 'YES'
+  else
+      echo 'NONE'
+  fi
+
+# Generating the missing logos
+elif [ "$1" == "missing" ] ; then
+  rm -f $LOG_FILE
+  touch $LOG_FILE
+  rm -rf $OUTPUT_DIR_TEMP
+
+  if [ -f "$MISS_FILE" ]; then
+      mkdir -p $OUTPUT_DIR_TEMP
+
+      # reading channels from TVH
+      for channel in `seq 0 $TVH_CH_COUNT`; do
+          ch_name=`curl -s $TVH_URL'/api/channel/grid?start='$channel'&limit=1' | jq -r '.entries | .[] | .name' | sed 's/\// /; s/|//; s/://; s/  / /g; s/ test$//i; s/[ \t]*$//'`
+          if [ -z "$ch_name" ]; then
+              continue
+          else
+              lcase_name=$(echo "$ch_name" | tr 'A-Z' 'a-z' | sed 's/\// /')
+              target_file="$LOGOS_DIR/$lcase_name.png"
+              tmp_file="$OUTPUT_DIR_TEMP/$lcase_name.png"
+              ch_text=$(echo "$ch_name" | sed 's/[ \t]*$//;s/ /\\n/g')
+
+              if [ ! -e "$target_file" ] ; then
+                  echo "Create missing logo: $ch_name" > $LOG_FILE
+                  montage \
+                      -size 268x200 \
+                      -background none \
+                      -gravity center \
+                      -fill $LOGOS_TEXT_COLOR \
+                      -font Open-Sans \
+                      label:"$ch_text" +set label \
+                      -shadow \
+                      -background transparent \
+                      -geometry +5+5 \
+                      "$tmp_file" 2> /dev/null
+
+                  convert +dither -background 'transparent' -resize $RESIZE -extent $EXTENT -gravity 'center' "$tmp_file" png:- 2> /dev/null | \
+                  composite - $BACKGROUND png:- 2> /dev/null | \
+                  composite -compose screen -blend 50x100 $FOREGROUND - "$target_file" 2> /dev/null
+              fi
+          fi
+      done
+      rm -rf $OUTPUT_DIR_TEMP
+  fi
+
+  rm -rf $SOURCE_DIR
+
+  #rename
+  echo "Rename logos..." > $LOG_FILE
+  # reading channels from TVH
+  rm -f $RENAME_FILE
+  for channel in `seq 0 $TVH_CH_COUNT`; do
+      ch_name=`curl -s $TVH_URL'/api/channel/grid?start='$channel'&limit=1' | jq -r '.entries | .[] | .name' | sed 's/\// /; s/|//; s/://; s/  / /g; s/ test$//i; s/[ \t]*$//'`
+      if [ -z "$ch_name" ]; then
+          continue
+      else
+          ch_service=`curl -s $TVH_URL'/api/channel/grid?start='$channel'&limit=1' | jq -r '.entries | .[] | .icon' | sed 's/^picon:\/\///; s/\.png$//;'`
+          echo "$ch_name -*- $ch_service" >> $RENAME_FILE
+      fi
+  done
+
+  cat $RENAME_FILE |
+      while read -r RE_NAME ; do
+          tmp_name=`echo "$RE_NAME" | awk -F' -\*-' '{print $1}' | sed 's/^[ \t]*//; s/[ \t]*$//'`
+          old_name=$(echo "$tmp_name" | sed 's/\// /; s/|//; s/://' | tr 'A-Z' 'a-z')
+          new_name=`echo "$RE_NAME" | awk -F'-\*- ' '{print $2}' | sed 's/^[ \t]*//; s/[ \t]*$//'`
+          if [ -e "$LOGOS_DIR/$new_name.png" ] ; then
+            continue
+          fi
+          mv -f "$LOGOS_DIR/$old_name.png" "$LOGOS_DIR/$new_name.png"
+      done
+
+  echo "Create logos completed." > $LOG_FILE
+fi
+
+exit 0
diff -Naurp CoreELEC-settings-238e0c2/src/resources/bin/tvh-status.sh CoreELEC-settings-238e0c2-patch/src/resources/bin/tvh-status.sh
--- CoreELEC-settings-238e0c2/src/resources/bin/tvh-status.sh	1970-01-01 03:00:00.000000000 +0300
+++ CoreELEC-settings-238e0c2-patch/src/resources/bin/tvh-status.sh	2018-06-24 20:17:43.000000000 +0300
@@ -0,0 +1,28 @@
+#!/bin/sh
+################################################################################
+#      This file is part of Alex@ELEC - http://www.alexelec.ru
+#      Copyright (C) 2011-present Alexandr Zuyev (alex@alexelec.ru)
+################################################################################
+
+LOCAL_TVH_CFG="/storage/.cache/services/tvheadend.conf"
+EXT_TVH_CFG="/storage/.kodi/userdata/addon_data/pvr.hts/settings.xml"
+
+  if [ -f "$LOCAL_TVH_CFG" ]; then
+      TVH_URL="http://127.0.0.1:9981"
+  elif [ -f "$EXT_TVH_CFG" ]; then
+      HOST_EXT=`cat $EXT_TVH_CFG | grep 'setting id=\"host\"' | sed 's|^.*<setting id=\"host\" value=\"||; s|\".*$||'`
+      PORT_EXT=`cat $EXT_TVH_CFG | grep 'setting id=\"http_port\"' | sed 's|^.*<setting id=\"http_port\" value=\"||; s|\".*$||'`
+      TVH_URL="http://$HOST_EXT:$PORT_EXT"
+  else
+      echo 'ERROR'
+      exit 1
+  fi
+
+ch_count=`curl -s $TVH_URL'/api/channel/grid?start=0&limit=1' | jq -r '.total'`
+if [ -n "$ch_count" -a "$ch_count" -gt 0 ]; then
+  echo "TVH_URL=\"$TVH_URL\"" > /tmp/tvh-url.logos
+  echo 'OK'
+else
+  echo 'ERROR'
+fi
+exit 0
diff -Naurp CoreELEC-settings-238e0c2/src/resources/lib/modules/tvserver.py CoreELEC-settings-238e0c2-patch/src/resources/lib/modules/tvserver.py
--- CoreELEC-settings-238e0c2/src/resources/lib/modules/tvserver.py	1970-01-01 03:00:00.000000000 +0300
+++ CoreELEC-settings-238e0c2-patch/src/resources/lib/modules/tvserver.py	2018-06-25 10:33:16.000000000 +0300
@@ -0,0 +1,397 @@
+# -*- coding: utf-8 -*-
+################################################################################
+#      This file is part of Alex@ELEC - http://www.alexelec.in.ua
+#      Copyright (C) 2011-present Alexandr Zuyev (alex@alexelec.in.ua)
+################################################################################
+
+import os
+import re
+import glob
+import time
+import xbmc
+import xbmcgui
+import oeWindows
+import threading
+import subprocess
+
+class tvserver:
+
+    ENABLED = False
+    D_TVH_DEBUG = None
+    D_TVH_FEINIT = None
+
+    URL_LOGOS_FILE = None
+    RUN_LOGOS = None
+    GET_LOGO_COUNT = None
+    GET_MISS_COUNT = None
+    GET_TVH_STATUS = None
+    LOGO_GET_LOG = None
+    KILL_LOGO_SH = None
+    D_LOGOS_CLEAR = None
+    D_LOGOS_BG_COLOR = None
+    D_LOGOS_FG_COLOR = None
+    D_LOGOS_TEXT_COLOR = None
+
+    menu = {'93': {
+        'name': 43000,
+        'menuLoader': 'load_menu',
+        'listTyp': 'list',
+        'InfoText': 4300,
+        }}
+
+    def __init__(self, oeMain):
+        try:
+            oeMain.dbg_log('tvserver::__init__', 'enter_function', 0)
+
+            self.struct = {
+                'oscam': {
+                    'order': 1,
+                    'name': 42020,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_oscam': {
+                            'order': 1,
+                            'name': 42021,
+                            'value': '0',
+                            'action': 'initialize_oscam',
+                            'type': 'bool',
+                            'InfoText': 4221,
+                        },
+                    },
+                },
+                'tvheadend': {
+                    'order': 2,
+                    'name': 42030,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_tvheadend': {
+                            'order': 1,
+                            'name': 42031,
+                            'value': '0',
+                            'action': 'initialize_tvheadend',
+                            'type': 'bool',
+                            'InfoText': 4231,
+                        },
+                        'tvh_feinit': {
+                            'order': 2,
+                            'name': 42032,
+                            'value': '0',
+                            'action': 'initialize_tvheadend',
+                            'type': 'bool',
+                            'parent': {'entry': 'enable_tvheadend','value': ['1']},
+                            'InfoText': 4232,
+                        },
+                        'tvh_debug': {
+                            'order': 3,
+                            'name': 42033,
+                            'value': '0',
+                            'action': 'initialize_tvheadend',
+                            'type': 'bool',
+                            'parent': {'entry': 'enable_tvheadend','value': ['1']},
+                            'InfoText': 4233,
+                        },
+                    },
+                },
+                'logos': {
+                    'order': 3,
+                    'name': 43050,
+                    'not_supported': [],
+                    'settings': {
+                        'logos_clear': {
+                            'order': 1,
+                            'name': 43052,
+                            'value': '0',
+                            'action': 'initialize_logos',
+                            'type': 'bool',
+                            'InfoText': 4352,
+                        },
+                        'logos_bg_color': {
+                            'order': 2,
+                            'name': 43053,
+                            'value': 'Grey',
+                            'values': ['Black', 'Blue', 'Green', 'Grey', 'GreyB', 'GreyBlue', 'GreyC', 'GreyM', 'Purple', 'Red', 'Vinous', 'White'],
+                            'action': 'initialize_logos',
+                            'type': 'multivalue',
+                            'InfoText': 4353,
+                        },
+                        'logos_fg_color': {
+                            'order': 3,
+                            'name': 43054,
+                            'value': '4',
+                            'values': ['1', '2', '3', '4', '5'],
+                            'action': 'initialize_logos',
+                            'type': 'multivalue',
+                            'InfoText': 4354,
+                        },
+                        'logos_text_color': {
+                            'order': 4,
+                            'name': 43055,
+                            'value': 'black',
+                            'values': ['white', 'black', 'red', 'blue', 'green', 'yellow'],
+                            'action': 'initialize_logos',
+                            'type': 'multivalue',
+                            'InfoText': 4355,
+                        },
+                        'logos_create': {
+                            'order': 5,
+                            'name': 43056,
+                            'value': None,
+                            'action': 'execute_logos',
+                            'type': 'button',
+                            'InfoText': 4356,
+                        },
+                    },
+                },
+            }
+
+            self.oe = oeMain
+
+            oeMain.dbg_log('tvserver::__init__', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::__init__', 'ERROR: (%s)' % repr(e))
+
+    def start_service(self):
+        try:
+            self.oe.dbg_log('tvserver::start_service', 'enter_function', 0)
+            self.load_values()
+            self.initialize_oscam()
+            self.initialize_tvheadend()
+            self.initialize_logos()
+            self.oe.dbg_log('tvserver::start_service', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::start_service', 'ERROR: (%s)' % repr(e))
+
+    def stop_service(self):
+        try:
+            self.oe.dbg_log('tvserver::stop_service', 'enter_function', 0)
+            self.oe.dbg_log('tvserver::stop_service', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::stop_service', 'ERROR: (' + repr(e) + ')')
+
+    def do_init(self):
+        try:
+            self.oe.dbg_log('tvserver::do_init', 'exit_function', 0)
+            self.load_values()
+            self.oe.dbg_log('tvserver::do_init', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::do_init', 'ERROR: (%s)' % repr(e))
+
+    def set_value(self, listItem):
+        try:
+            self.oe.dbg_log('tvserver::set_value', 'enter_function', 0)
+            self.struct[listItem.getProperty('category')]['settings'
+                    ][listItem.getProperty('entry')]['value'] = \
+                listItem.getProperty('value')
+
+            self.oe.dbg_log('tvserver::set_value', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::set_value', 'ERROR: (' + repr(e) + ')')
+
+    def load_menu(self, focusItem):
+        try:
+            self.oe.dbg_log('tvserver::load_menu', 'enter_function', 0)
+            self.oe.winOeMain.build_menu(self.struct)
+            self.oe.dbg_log('tvserver::load_menu', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::load_menu', 'ERROR: (%s)' % repr(e))
+
+    def load_values(self):
+        try:
+            self.oe.dbg_log('tvserver::load_values', 'enter_function', 0)
+
+            # OSCAM_DAEMON
+            self.struct['oscam']['settings']['enable_oscam']['value'] = \
+                    self.oe.get_service_state('oscam')
+
+            # TVHEADEND
+            self.struct['tvheadend']['settings']['enable_tvheadend']['value'] = \
+                    self.oe.get_service_state('tvheadend')
+
+            self.struct['tvheadend']['settings']['tvh_debug']['value'] = \
+            self.oe.get_service_option('tvheadend', 'TVH_DEBUG', self.D_TVH_DEBUG).replace('"', '')
+
+            self.struct['tvheadend']['settings']['tvh_feinit']['value'] = \
+            self.oe.get_service_option('tvheadend', 'TVH_FEINIT', self.D_TVH_FEINIT).replace('"', '')
+
+            # Logos
+            self.struct['logos']['settings']['logos_clear']['value'] = \
+            self.oe.get_service_option('logos', 'LOGOS_CLEAR', self.D_LOGOS_CLEAR).replace('"', '')
+
+            self.struct['logos']['settings']['logos_bg_color']['value'] = \
+            self.oe.get_service_option('logos', 'LOGOS_BG_COLOR', self.D_LOGOS_BG_COLOR).replace('"', '')
+
+            self.struct['logos']['settings']['logos_fg_color']['value'] = \
+            self.oe.get_service_option('logos', 'LOGOS_FG_COLOR', self.D_LOGOS_FG_COLOR).replace('"', '')
+
+            self.struct['logos']['settings']['logos_text_color']['value'] = \
+            self.oe.get_service_option('logos', 'LOGOS_TEXT_COLOR', self.D_LOGOS_TEXT_COLOR).replace('"', '')
+
+            self.oe.dbg_log('tvserver::load_values', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::load_values', 'ERROR: (%s)' % repr(e))
+
+    def initialize_oscam(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvserver::initialize_oscam', 'enter_function', 0)
+            self.oe.set_busy(1)
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+            options = {}
+            state = 0
+            if self.struct['oscam']['settings']['enable_oscam']['value'] == '1':
+                state = 1
+            self.oe.set_service('oscam', options, state)
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_oscam', 'exit_function', 0)
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_oscam', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_tvheadend(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvserver::initialize_tvheadend', 'enter_function', 0)
+            self.oe.set_busy(1)
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+            options = {}
+            state = 0
+            if self.struct['tvheadend']['settings']['enable_tvheadend']['value'] == '1':
+                state = 1
+                options['TVH_DEBUG']    = '"%s"' % self.struct['tvheadend']['settings']['tvh_debug']['value']
+                options['TVH_FEINIT'] = '"%s"' % self.struct['tvheadend']['settings']['tvh_feinit']['value']
+            self.oe.set_service('tvheadend', options, state)
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_tvheadend', 'exit_function', 0)
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_tvheadend', 'ERROR: (%s)' % repr(e), 4)
+
+    def initialize_logos(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvserver::initialize_logos', 'enter_function', 0)
+            self.oe.set_busy(1)
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+            options = {}
+            state = 1
+            options['LOGOS_CLEAR'] = '"%s"' % self.struct['logos']['settings']['logos_clear']['value']
+            options['LOGOS_BG_COLOR'] = '"%s"' % self.struct['logos']['settings']['logos_bg_color']['value']
+            options['LOGOS_FG_COLOR'] = '"%s"' % self.struct['logos']['settings']['logos_fg_color']['value']
+            options['LOGOS_TEXT_COLOR'] = '"%s"' % self.struct['logos']['settings']['logos_text_color']['value']
+            self.oe.set_service('logos', options, state)
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_logos', 'exit_function', 0)
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_logos', 'ERROR: (%s)' % repr(e), 4)
+
+    def execute_logos(self, listItem=None, silent=False):
+        try:
+            self.oe.dbg_log('tvserver::execute_logos', 'enter_function', 0)
+
+            # get TVH status
+            tvh_status = self.oe.execute(self.GET_TVH_STATUS, 1).strip()
+            if tvh_status == 'ERROR':
+                xbmcDialog = xbmcgui.Dialog()
+                answer = xbmcDialog.ok('Tvheadend logos',
+                            'Error: Tvheadend is not running or can not be found a list of channels.')
+                return
+
+            self.download_file = self.URL_LOGOS_FILE
+            if hasattr(self, 'download_file'):
+                downloaded = self.oe.download_file(self.download_file, self.oe.TEMP + self.download_file.split('/')[-1], silent)
+                if not downloaded is None:
+                    self.oe.notify(self.oe._(32363), 'Unpack logos... Wait about 60 sec.')
+                    self.oe.set_busy(1)
+                    self.oe.execute(self.RUN_LOGOS + ' unpack', 0)
+
+                    self.oe.execute(self.RUN_LOGOS + ' list', 0)
+                    logo_count = self.oe.execute(self.GET_LOGO_COUNT, 1).strip()
+                    logo_count = int(logo_count)
+                    self.oe.set_busy(0)
+
+                    self.oe.notify(self.oe._(32363), 'Conversion logos...')
+                    subprocess.Popen(self.RUN_LOGOS + ' convert',
+                                        shell=True,
+                                        close_fds=True,
+                                        stdout=subprocess.PIPE,
+                                        stderr=subprocess.STDOUT)
+
+                    xbmcDialog = xbmcgui.DialogProgress()
+                    xbmcDialog.create('Conversion logos', "",
+                                'Number logos in list:  %d' % logo_count)
+
+                    message = self.oe.execute(self.LOGO_GET_LOG, 1).strip()
+                    message_tmp = message
+                    i = 0
+                    max_count = logo_count + 1
+                    while not 'Conversion logos completed.' in message:
+                        percent = int((i / float(logo_count)) * 100)
+                        message = self.oe.execute(self.LOGO_GET_LOG, 1).strip()
+                        if message_tmp != message:
+                            message_tmp = message
+                            if i < max_count:
+                                i = i + 1
+                        xbmcDialog.update(percent, "", "", message)
+                        xbmc.sleep(500)
+                        if xbmcDialog.iscanceled():
+                            self.oe.execute(self.KILL_LOGO_SH, 0)
+                            break
+
+                    xbmc.sleep(1000)
+                    xbmcDialog.close()
+
+                    self.oe.notify(self.oe._(32363), 'Create missing logos list...')
+                    self.oe.set_busy(1)
+                    miss_msg = self.oe.execute(self.RUN_LOGOS + ' misslist', 1).strip()
+                    self.oe.set_busy(0)
+
+                    if miss_msg == 'YES':
+                        logo_count = self.oe.execute(self.GET_MISS_COUNT, 1).strip()
+                        logo_count = int(logo_count)
+                        subprocess.Popen(self.RUN_LOGOS + ' missing',
+                                        shell=True, 
+                                        close_fds=True,
+                                        stdout=subprocess.PIPE,
+                                        stderr=subprocess.STDOUT)
+
+                        xbmcDialog = xbmcgui.DialogProgress()
+                        xbmcDialog.create('Create missing logos', "",
+                                'Number logos in list:  %d' % logo_count)
+
+                        message = self.oe.execute(self.LOGO_GET_LOG, 1).strip()
+                        message_tmp = message
+                        i = 0
+                        max_count = logo_count + 1
+                        while not 'Create logos completed.' in message:
+                            percent = int((i / float(logo_count)) * 100)
+                            message = self.oe.execute(self.LOGO_GET_LOG, 1).strip()
+                            if message_tmp != message:
+                                message_tmp = message
+                                if i < max_count:
+                                    i = i + 1
+                            xbmcDialog.update(percent, "", "", message)
+                            xbmc.sleep(500)
+                            if xbmcDialog.iscanceled():
+                                self.oe.execute(self.KILL_LOGO_SH, 0)
+                                break
+
+                        xbmc.sleep(3000)
+                        xbmcDialog.close()
+                    else:
+                        self.oe.notify(self.oe._(32363), 'Rename logos...')
+                        self.oe.set_busy(1)
+                        self.oe.execute(self.RUN_LOGOS + ' missing', 0)
+                        self.oe.set_busy(0)
+                        self.oe.notify(self.oe._(32363), 'Create logos completed.')
+
+            self.oe.dbg_log('tvserver::execute_logos', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::execute_logos', 'ERROR: (' + repr(e) + ')')
+
+    def exit(self):
+        try:
+            self.oe.dbg_log('tvserver::exit', 'enter_function', 0)
+            self.oe.dbg_log('tvserver::exit', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('tvserver::exit', 'ERROR: (%s)' % repr(e), 4)
